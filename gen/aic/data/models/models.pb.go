// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.23.1
// source: aic/data/aic_api/models.proto

package models

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AccountType int32

const (
	AccountType_DEFAULT_ACCOUNT AccountType = 0
	AccountType_USER            AccountType = 100
	AccountType_VERIFIED_USER   AccountType = 200
	AccountType_ADMIN           AccountType = 300
)

// Enum value maps for AccountType.
var (
	AccountType_name = map[int32]string{
		0:   "DEFAULT_ACCOUNT",
		100: "USER",
		200: "VERIFIED_USER",
		300: "ADMIN",
	}
	AccountType_value = map[string]int32{
		"DEFAULT_ACCOUNT": 0,
		"USER":            100,
		"VERIFIED_USER":   200,
		"ADMIN":           300,
	}
)

func (x AccountType) Enum() *AccountType {
	p := new(AccountType)
	*p = x
	return p
}

func (x AccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_aic_data_aic_api_models_proto_enumTypes[0].Descriptor()
}

func (AccountType) Type() protoreflect.EnumType {
	return &file_aic_data_aic_api_models_proto_enumTypes[0]
}

func (x AccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountType.Descriptor instead.
func (AccountType) EnumDescriptor() ([]byte, []int) {
	return file_aic_data_aic_api_models_proto_rawDescGZIP(), []int{0}
}

type AffliationType int32

const (
	AffliationType_DEFAULT_AFFLIATION AffliationType = 0
	AffliationType_SCHOOL             AffliationType = 100
	AffliationType_TUITION_CENTRE     AffliationType = 200
)

// Enum value maps for AffliationType.
var (
	AffliationType_name = map[int32]string{
		0:   "DEFAULT_AFFLIATION",
		100: "SCHOOL",
		200: "TUITION_CENTRE",
	}
	AffliationType_value = map[string]int32{
		"DEFAULT_AFFLIATION": 0,
		"SCHOOL":             100,
		"TUITION_CENTRE":     200,
	}
)

func (x AffliationType) Enum() *AffliationType {
	p := new(AffliationType)
	*p = x
	return p
}

func (x AffliationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AffliationType) Descriptor() protoreflect.EnumDescriptor {
	return file_aic_data_aic_api_models_proto_enumTypes[1].Descriptor()
}

func (AffliationType) Type() protoreflect.EnumType {
	return &file_aic_data_aic_api_models_proto_enumTypes[1]
}

func (x AffliationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AffliationType.Descriptor instead.
func (AffliationType) EnumDescriptor() ([]byte, []int) {
	return file_aic_data_aic_api_models_proto_rawDescGZIP(), []int{1}
}

type Option int32

const (
	Option_A Option = 0
	Option_B Option = 10
	Option_C Option = 20
	Option_D Option = 30
)

// Enum value maps for Option.
var (
	Option_name = map[int32]string{
		0:  "A",
		10: "B",
		20: "C",
		30: "D",
	}
	Option_value = map[string]int32{
		"A": 0,
		"B": 10,
		"C": 20,
		"D": 30,
	}
)

func (x Option) Enum() *Option {
	p := new(Option)
	*p = x
	return p
}

func (x Option) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Option) Descriptor() protoreflect.EnumDescriptor {
	return file_aic_data_aic_api_models_proto_enumTypes[2].Descriptor()
}

func (Option) Type() protoreflect.EnumType {
	return &file_aic_data_aic_api_models_proto_enumTypes[2]
}

func (x Option) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Option.Descriptor instead.
func (Option) EnumDescriptor() ([]byte, []int) {
	return file_aic_data_aic_api_models_proto_rawDescGZIP(), []int{2}
}

type Tier int32

const (
	Tier_DEFAULT_TIER Tier = 0
	Tier_PRIMARY      Tier = 100
	Tier_SECONDARY    Tier = 200
	Tier_JC           Tier = 300
)

// Enum value maps for Tier.
var (
	Tier_name = map[int32]string{
		0:   "DEFAULT_TIER",
		100: "PRIMARY",
		200: "SECONDARY",
		300: "JC",
	}
	Tier_value = map[string]int32{
		"DEFAULT_TIER": 0,
		"PRIMARY":      100,
		"SECONDARY":    200,
		"JC":           300,
	}
)

func (x Tier) Enum() *Tier {
	p := new(Tier)
	*p = x
	return p
}

func (x Tier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Tier) Descriptor() protoreflect.EnumDescriptor {
	return file_aic_data_aic_api_models_proto_enumTypes[3].Descriptor()
}

func (Tier) Type() protoreflect.EnumType {
	return &file_aic_data_aic_api_models_proto_enumTypes[3]
}

func (x Tier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Tier.Descriptor instead.
func (Tier) EnumDescriptor() ([]byte, []int) {
	return file_aic_data_aic_api_models_proto_rawDescGZIP(), []int{3}
}

type Subject int32

const (
	Subject_DEFAULT_SUBJECT Subject = 0
	// Primary
	Subject_MATH          Subject = 10
	Subject_SCIENCE       Subject = 20
	Subject_ENGLISH       Subject = 30
	Subject_MOTHER_TONGUE Subject = 40
	// Secondary
	Subject_ELEMENTARY_MATH    Subject = 1000
	Subject_ADDITIONAL_MATH    Subject = 1010
	Subject_HARD_SCIENCE       Subject = 1100
	Subject_HARD_MATH          Subject = 1200
	Subject_HARD_ENGLISH       Subject = 1300
	Subject_HARD_MOTHER_TONGUE Subject = 1400
)

// Enum value maps for Subject.
var (
	Subject_name = map[int32]string{
		0:    "DEFAULT_SUBJECT",
		10:   "MATH",
		20:   "SCIENCE",
		30:   "ENGLISH",
		40:   "MOTHER_TONGUE",
		1000: "ELEMENTARY_MATH",
		1010: "ADDITIONAL_MATH",
		1100: "HARD_SCIENCE",
		1200: "HARD_MATH",
		1300: "HARD_ENGLISH",
		1400: "HARD_MOTHER_TONGUE",
	}
	Subject_value = map[string]int32{
		"DEFAULT_SUBJECT":    0,
		"MATH":               10,
		"SCIENCE":            20,
		"ENGLISH":            30,
		"MOTHER_TONGUE":      40,
		"ELEMENTARY_MATH":    1000,
		"ADDITIONAL_MATH":    1010,
		"HARD_SCIENCE":       1100,
		"HARD_MATH":          1200,
		"HARD_ENGLISH":       1300,
		"HARD_MOTHER_TONGUE": 1400,
	}
)

func (x Subject) Enum() *Subject {
	p := new(Subject)
	*p = x
	return p
}

func (x Subject) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Subject) Descriptor() protoreflect.EnumDescriptor {
	return file_aic_data_aic_api_models_proto_enumTypes[4].Descriptor()
}

func (Subject) Type() protoreflect.EnumType {
	return &file_aic_data_aic_api_models_proto_enumTypes[4]
}

func (x Subject) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Subject.Descriptor instead.
func (Subject) EnumDescriptor() ([]byte, []int) {
	return file_aic_data_aic_api_models_proto_rawDescGZIP(), []int{4}
}

type Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata
	Uid         string      `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AccountType AccountType `protobuf:"varint,2,opt,name=account_type,json=accountType,proto3,enum=aic_api.AccountType" json:"account_type,omitempty"`
	// User data
	Email          string  `protobuf:"bytes,10,opt,name=email,proto3" json:"email,omitempty"`
	DisplayPicture string  `protobuf:"bytes,11,opt,name=display_picture,json=displayPicture,proto3" json:"display_picture,omitempty"`
	DisplayName    string  `protobuf:"bytes,12,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	School         *School `protobuf:"bytes,13,opt,name=school,proto3" json:"school,omitempty"`
	// Affliations
	Affliations []*Affliation `protobuf:"bytes,20,rep,name=affliations,proto3" json:"affliations,omitempty"`
	IsBanned    bool          `protobuf:"varint,200,opt,name=is_banned,json=isBanned,proto3" json:"is_banned,omitempty"`
}

func (x *Profile) Reset() {
	*x = Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aic_data_aic_api_models_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile) ProtoMessage() {}

func (x *Profile) ProtoReflect() protoreflect.Message {
	mi := &file_aic_data_aic_api_models_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile.ProtoReflect.Descriptor instead.
func (*Profile) Descriptor() ([]byte, []int) {
	return file_aic_data_aic_api_models_proto_rawDescGZIP(), []int{0}
}

func (x *Profile) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Profile) GetAccountType() AccountType {
	if x != nil {
		return x.AccountType
	}
	return AccountType_DEFAULT_ACCOUNT
}

func (x *Profile) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Profile) GetDisplayPicture() string {
	if x != nil {
		return x.DisplayPicture
	}
	return ""
}

func (x *Profile) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Profile) GetSchool() *School {
	if x != nil {
		return x.School
	}
	return nil
}

func (x *Profile) GetAffliations() []*Affliation {
	if x != nil {
		return x.Affliations
	}
	return nil
}

func (x *Profile) GetIsBanned() bool {
	if x != nil {
		return x.IsBanned
	}
	return false
}

type Affliation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata
	AffliationType AffliationType `protobuf:"varint,1,opt,name=affliation_type,json=affliationType,proto3,enum=aic_api.AffliationType" json:"affliation_type,omitempty"`
	// School
	School *School `protobuf:"bytes,20,opt,name=school,proto3" json:"school,omitempty"`
	// Tuition Centre
	TuitionCentre *TuitionCentre `protobuf:"bytes,30,opt,name=tuition_centre,json=tuitionCentre,proto3" json:"tuition_centre,omitempty"`
}

func (x *Affliation) Reset() {
	*x = Affliation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aic_data_aic_api_models_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Affliation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Affliation) ProtoMessage() {}

func (x *Affliation) ProtoReflect() protoreflect.Message {
	mi := &file_aic_data_aic_api_models_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Affliation.ProtoReflect.Descriptor instead.
func (*Affliation) Descriptor() ([]byte, []int) {
	return file_aic_data_aic_api_models_proto_rawDescGZIP(), []int{1}
}

func (x *Affliation) GetAffliationType() AffliationType {
	if x != nil {
		return x.AffliationType
	}
	return AffliationType_DEFAULT_AFFLIATION
}

func (x *Affliation) GetSchool() *School {
	if x != nil {
		return x.School
	}
	return nil
}

func (x *Affliation) GetTuitionCentre() *TuitionCentre {
	if x != nil {
		return x.TuitionCentre
	}
	return nil
}

type Question struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata
	Uid     string  `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Tier    Tier    `protobuf:"varint,2,opt,name=tier,proto3,enum=aic_api.Tier" json:"tier,omitempty"`
	Subject Subject `protobuf:"varint,3,opt,name=subject,proto3,enum=aic_api.Subject" json:"subject,omitempty"`
	TopicId string  `protobuf:"bytes,4,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	// Source
	School     *School  `protobuf:"bytes,10,opt,name=school,proto3" json:"school,omitempty"`
	PaperYear  string   `protobuf:"bytes,11,opt,name=paper_year,json=paperYear,proto3" json:"paper_year,omitempty"`
	PaperName  string   `protobuf:"bytes,12,opt,name=paper_name,json=paperName,proto3" json:"paper_name,omitempty"`
	UploadedBy *Profile `protobuf:"bytes,13,opt,name=uploaded_by,json=uploadedBy,proto3" json:"uploaded_by,omitempty"`
	UploadedAt int64    `protobuf:"varint,14,opt,name=uploaded_at,json=uploadedAt,proto3" json:"uploaded_at,omitempty"`
	// Question
	QuestionString string `protobuf:"bytes,20,opt,name=question_string,json=questionString,proto3" json:"question_string,omitempty"`
	// Options
	OptionA string `protobuf:"bytes,30,opt,name=option_a,json=optionA,proto3" json:"option_a,omitempty"`
	OptionB string `protobuf:"bytes,31,opt,name=option_b,json=optionB,proto3" json:"option_b,omitempty"`
	OptionC string `protobuf:"bytes,32,opt,name=option_c,json=optionC,proto3" json:"option_c,omitempty"`
	OptionD string `protobuf:"bytes,33,opt,name=option_d,json=optionD,proto3" json:"option_d,omitempty"`
	// Answer
	CorrectAnswerHash string `protobuf:"bytes,40,opt,name=correct_answer_hash,json=correctAnswerHash,proto3" json:"correct_answer_hash,omitempty"`
	// Analysis
	QuestionAnalysis *QuestionAnalysis `protobuf:"bytes,50,opt,name=question_analysis,json=questionAnalysis,proto3" json:"question_analysis,omitempty"`
	// User specific data
	NumberOfAttempts uint64 `protobuf:"varint,60,opt,name=number_of_attempts,json=numberOfAttempts,proto3" json:"number_of_attempts,omitempty"`
}

func (x *Question) Reset() {
	*x = Question{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aic_data_aic_api_models_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Question) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Question) ProtoMessage() {}

func (x *Question) ProtoReflect() protoreflect.Message {
	mi := &file_aic_data_aic_api_models_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Question.ProtoReflect.Descriptor instead.
func (*Question) Descriptor() ([]byte, []int) {
	return file_aic_data_aic_api_models_proto_rawDescGZIP(), []int{2}
}

func (x *Question) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Question) GetTier() Tier {
	if x != nil {
		return x.Tier
	}
	return Tier_DEFAULT_TIER
}

func (x *Question) GetSubject() Subject {
	if x != nil {
		return x.Subject
	}
	return Subject_DEFAULT_SUBJECT
}

func (x *Question) GetTopicId() string {
	if x != nil {
		return x.TopicId
	}
	return ""
}

func (x *Question) GetSchool() *School {
	if x != nil {
		return x.School
	}
	return nil
}

func (x *Question) GetPaperYear() string {
	if x != nil {
		return x.PaperYear
	}
	return ""
}

func (x *Question) GetPaperName() string {
	if x != nil {
		return x.PaperName
	}
	return ""
}

func (x *Question) GetUploadedBy() *Profile {
	if x != nil {
		return x.UploadedBy
	}
	return nil
}

func (x *Question) GetUploadedAt() int64 {
	if x != nil {
		return x.UploadedAt
	}
	return 0
}

func (x *Question) GetQuestionString() string {
	if x != nil {
		return x.QuestionString
	}
	return ""
}

func (x *Question) GetOptionA() string {
	if x != nil {
		return x.OptionA
	}
	return ""
}

func (x *Question) GetOptionB() string {
	if x != nil {
		return x.OptionB
	}
	return ""
}

func (x *Question) GetOptionC() string {
	if x != nil {
		return x.OptionC
	}
	return ""
}

func (x *Question) GetOptionD() string {
	if x != nil {
		return x.OptionD
	}
	return ""
}

func (x *Question) GetCorrectAnswerHash() string {
	if x != nil {
		return x.CorrectAnswerHash
	}
	return ""
}

func (x *Question) GetQuestionAnalysis() *QuestionAnalysis {
	if x != nil {
		return x.QuestionAnalysis
	}
	return nil
}

func (x *Question) GetNumberOfAttempts() uint64 {
	if x != nil {
		return x.NumberOfAttempts
	}
	return 0
}

type QuestionAnalysis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata
	Year string `protobuf:"bytes,1,opt,name=year,proto3" json:"year,omitempty"`
	// Attempts
	TotalAttempts     uint64 `protobuf:"varint,10,opt,name=total_attempts,json=totalAttempts,proto3" json:"total_attempts,omitempty"`
	CorrectAttempts   uint64 `protobuf:"varint,11,opt,name=correct_attempts,json=correctAttempts,proto3" json:"correct_attempts,omitempty"`
	IncorrectAttempts uint64 `protobuf:"varint,12,opt,name=incorrect_attempts,json=incorrectAttempts,proto3" json:"incorrect_attempts,omitempty"`
	// Analysis
	CorrectAnswerPercentage uint32 `protobuf:"varint,20,opt,name=correct_answer_percentage,json=correctAnswerPercentage,proto3" json:"correct_answer_percentage,omitempty"`
	AverageTimeTaken        string `protobuf:"bytes,21,opt,name=average_time_taken,json=averageTimeTaken,proto3" json:"average_time_taken,omitempty"`
	// Statistics
	SdTimeCorrectAttempts   float32 `protobuf:"fixed32,30,opt,name=sd_time_correct_attempts,json=sdTimeCorrectAttempts,proto3" json:"sd_time_correct_attempts,omitempty"`
	MeanTimeCorrectAttempts float32 `protobuf:"fixed32,31,opt,name=mean_time_correct_attempts,json=meanTimeCorrectAttempts,proto3" json:"mean_time_correct_attempts,omitempty"`
	// Likes
	NumberOfLikes uint64 `protobuf:"varint,40,opt,name=number_of_likes,json=numberOfLikes,proto3" json:"number_of_likes,omitempty"`
}

func (x *QuestionAnalysis) Reset() {
	*x = QuestionAnalysis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aic_data_aic_api_models_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionAnalysis) ProtoMessage() {}

func (x *QuestionAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_aic_data_aic_api_models_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionAnalysis.ProtoReflect.Descriptor instead.
func (*QuestionAnalysis) Descriptor() ([]byte, []int) {
	return file_aic_data_aic_api_models_proto_rawDescGZIP(), []int{3}
}

func (x *QuestionAnalysis) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *QuestionAnalysis) GetTotalAttempts() uint64 {
	if x != nil {
		return x.TotalAttempts
	}
	return 0
}

func (x *QuestionAnalysis) GetCorrectAttempts() uint64 {
	if x != nil {
		return x.CorrectAttempts
	}
	return 0
}

func (x *QuestionAnalysis) GetIncorrectAttempts() uint64 {
	if x != nil {
		return x.IncorrectAttempts
	}
	return 0
}

func (x *QuestionAnalysis) GetCorrectAnswerPercentage() uint32 {
	if x != nil {
		return x.CorrectAnswerPercentage
	}
	return 0
}

func (x *QuestionAnalysis) GetAverageTimeTaken() string {
	if x != nil {
		return x.AverageTimeTaken
	}
	return ""
}

func (x *QuestionAnalysis) GetSdTimeCorrectAttempts() float32 {
	if x != nil {
		return x.SdTimeCorrectAttempts
	}
	return 0
}

func (x *QuestionAnalysis) GetMeanTimeCorrectAttempts() float32 {
	if x != nil {
		return x.MeanTimeCorrectAttempts
	}
	return 0
}

func (x *QuestionAnalysis) GetNumberOfLikes() uint64 {
	if x != nil {
		return x.NumberOfLikes
	}
	return 0
}

type AnswerAnalysis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata
	Uid       string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Option    Option `protobuf:"varint,2,opt,name=option,proto3,enum=aic_api.Option" json:"option,omitempty"`
	IsCorrect bool   `protobuf:"varint,3,opt,name=is_correct,json=isCorrect,proto3" json:"is_correct,omitempty"`
	// Analysis
	// TODO
	AnswerAnalysisBreakdown *AnswerAnalysisBreakdown `protobuf:"bytes,10,opt,name=answer_analysis_breakdown,json=answerAnalysisBreakdown,proto3" json:"answer_analysis_breakdown,omitempty"`
}

func (x *AnswerAnalysis) Reset() {
	*x = AnswerAnalysis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aic_data_aic_api_models_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnswerAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerAnalysis) ProtoMessage() {}

func (x *AnswerAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_aic_data_aic_api_models_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerAnalysis.ProtoReflect.Descriptor instead.
func (*AnswerAnalysis) Descriptor() ([]byte, []int) {
	return file_aic_data_aic_api_models_proto_rawDescGZIP(), []int{4}
}

func (x *AnswerAnalysis) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *AnswerAnalysis) GetOption() Option {
	if x != nil {
		return x.Option
	}
	return Option_A
}

func (x *AnswerAnalysis) GetIsCorrect() bool {
	if x != nil {
		return x.IsCorrect
	}
	return false
}

func (x *AnswerAnalysis) GetAnswerAnalysisBreakdown() *AnswerAnalysisBreakdown {
	if x != nil {
		return x.AnswerAnalysisBreakdown
	}
	return nil
}

type AnswerAnalysisBreakdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AnswerAnalysisBreakdown) Reset() {
	*x = AnswerAnalysisBreakdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aic_data_aic_api_models_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnswerAnalysisBreakdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerAnalysisBreakdown) ProtoMessage() {}

func (x *AnswerAnalysisBreakdown) ProtoReflect() protoreflect.Message {
	mi := &file_aic_data_aic_api_models_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerAnalysisBreakdown.ProtoReflect.Descriptor instead.
func (*AnswerAnalysisBreakdown) Descriptor() ([]byte, []int) {
	return file_aic_data_aic_api_models_proto_rawDescGZIP(), []int{5}
}

type Attempt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata
	Uid         string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	QuestionUid string `protobuf:"bytes,2,opt,name=question_uid,json=questionUid,proto3" json:"question_uid,omitempty"`
	UserUid     string `protobuf:"bytes,3,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	// Attempt
	Answer    Option `protobuf:"varint,10,opt,name=answer,proto3,enum=aic_api.Option" json:"answer,omitempty"`
	TimeTaken string `protobuf:"bytes,11,opt,name=time_taken,json=timeTaken,proto3" json:"time_taken,omitempty"`
}

func (x *Attempt) Reset() {
	*x = Attempt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aic_data_aic_api_models_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attempt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attempt) ProtoMessage() {}

func (x *Attempt) ProtoReflect() protoreflect.Message {
	mi := &file_aic_data_aic_api_models_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attempt.ProtoReflect.Descriptor instead.
func (*Attempt) Descriptor() ([]byte, []int) {
	return file_aic_data_aic_api_models_proto_rawDescGZIP(), []int{6}
}

func (x *Attempt) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Attempt) GetQuestionUid() string {
	if x != nil {
		return x.QuestionUid
	}
	return ""
}

func (x *Attempt) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

func (x *Attempt) GetAnswer() Option {
	if x != nil {
		return x.Answer
	}
	return Option_A
}

func (x *Attempt) GetTimeTaken() string {
	if x != nil {
		return x.TimeTaken
	}
	return ""
}

type Solution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata
	Uid         string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	QuestionUid string   `protobuf:"bytes,2,opt,name=question_uid,json=questionUid,proto3" json:"question_uid,omitempty"`
	SubmittedBy *Profile `protobuf:"bytes,3,opt,name=submitted_by,json=submittedBy,proto3" json:"submitted_by,omitempty"`
	// Solution content
	Solution       string   `protobuf:"bytes,10,opt,name=solution,proto3" json:"solution,omitempty"`
	SolutionImages []string `protobuf:"bytes,11,rep,name=solution_images,json=solutionImages,proto3" json:"solution_images,omitempty"`
	// Other data
	NumberOfLikes uint64 `protobuf:"varint,20,opt,name=number_of_likes,json=numberOfLikes,proto3" json:"number_of_likes,omitempty"`
}

func (x *Solution) Reset() {
	*x = Solution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aic_data_aic_api_models_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Solution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Solution) ProtoMessage() {}

func (x *Solution) ProtoReflect() protoreflect.Message {
	mi := &file_aic_data_aic_api_models_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Solution.ProtoReflect.Descriptor instead.
func (*Solution) Descriptor() ([]byte, []int) {
	return file_aic_data_aic_api_models_proto_rawDescGZIP(), []int{7}
}

func (x *Solution) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Solution) GetQuestionUid() string {
	if x != nil {
		return x.QuestionUid
	}
	return ""
}

func (x *Solution) GetSubmittedBy() *Profile {
	if x != nil {
		return x.SubmittedBy
	}
	return nil
}

func (x *Solution) GetSolution() string {
	if x != nil {
		return x.Solution
	}
	return ""
}

func (x *Solution) GetSolutionImages() []string {
	if x != nil {
		return x.SolutionImages
	}
	return nil
}

func (x *Solution) GetNumberOfLikes() uint64 {
	if x != nil {
		return x.NumberOfLikes
	}
	return 0
}

type Discussion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata
	Uid         string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	QuestionUid string   `protobuf:"bytes,2,opt,name=question_uid,json=questionUid,proto3" json:"question_uid,omitempty"`
	SubmittedBy *Profile `protobuf:"bytes,3,opt,name=submitted_by,json=submittedBy,proto3" json:"submitted_by,omitempty"`
	// Discussion content
	Discussion       string   `protobuf:"bytes,10,opt,name=discussion,proto3" json:"discussion,omitempty"`
	DiscussionImages []string `protobuf:"bytes,11,rep,name=discussion_images,json=discussionImages,proto3" json:"discussion_images,omitempty"`
	// Other data
	NumberOfLikes    uint64 `protobuf:"varint,20,opt,name=number_of_likes,json=numberOfLikes,proto3" json:"number_of_likes,omitempty"`
	NumberOfComments uint64 `protobuf:"varint,30,opt,name=number_of_comments,json=numberOfComments,proto3" json:"number_of_comments,omitempty"`
}

func (x *Discussion) Reset() {
	*x = Discussion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aic_data_aic_api_models_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Discussion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Discussion) ProtoMessage() {}

func (x *Discussion) ProtoReflect() protoreflect.Message {
	mi := &file_aic_data_aic_api_models_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Discussion.ProtoReflect.Descriptor instead.
func (*Discussion) Descriptor() ([]byte, []int) {
	return file_aic_data_aic_api_models_proto_rawDescGZIP(), []int{8}
}

func (x *Discussion) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Discussion) GetQuestionUid() string {
	if x != nil {
		return x.QuestionUid
	}
	return ""
}

func (x *Discussion) GetSubmittedBy() *Profile {
	if x != nil {
		return x.SubmittedBy
	}
	return nil
}

func (x *Discussion) GetDiscussion() string {
	if x != nil {
		return x.Discussion
	}
	return ""
}

func (x *Discussion) GetDiscussionImages() []string {
	if x != nil {
		return x.DiscussionImages
	}
	return nil
}

func (x *Discussion) GetNumberOfLikes() uint64 {
	if x != nil {
		return x.NumberOfLikes
	}
	return 0
}

func (x *Discussion) GetNumberOfComments() uint64 {
	if x != nil {
		return x.NumberOfComments
	}
	return 0
}

type School struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata
	Uid     string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	LogoUrl string `protobuf:"bytes,2,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`
	// School data
	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Tier Tier   `protobuf:"varint,11,opt,name=tier,proto3,enum=aic_api.Tier" json:"tier,omitempty"`
}

func (x *School) Reset() {
	*x = School{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aic_data_aic_api_models_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *School) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*School) ProtoMessage() {}

func (x *School) ProtoReflect() protoreflect.Message {
	mi := &file_aic_data_aic_api_models_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use School.ProtoReflect.Descriptor instead.
func (*School) Descriptor() ([]byte, []int) {
	return file_aic_data_aic_api_models_proto_rawDescGZIP(), []int{9}
}

func (x *School) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *School) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *School) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *School) GetTier() Tier {
	if x != nil {
		return x.Tier
	}
	return Tier_DEFAULT_TIER
}

type TuitionCentre struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata
	Uid     string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	LogoUrl string `protobuf:"bytes,2,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`
	// Tution Centre data
	Name          string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Address       string `protobuf:"bytes,11,opt,name=address,proto3" json:"address,omitempty"`
	ContactNumber string `protobuf:"bytes,12,opt,name=contact_number,json=contactNumber,proto3" json:"contact_number,omitempty"`
	Email         string `protobuf:"bytes,13,opt,name=email,proto3" json:"email,omitempty"`
	Tier          []Tier `protobuf:"varint,14,rep,packed,name=tier,proto3,enum=aic_api.Tier" json:"tier,omitempty"`
}

func (x *TuitionCentre) Reset() {
	*x = TuitionCentre{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aic_data_aic_api_models_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TuitionCentre) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TuitionCentre) ProtoMessage() {}

func (x *TuitionCentre) ProtoReflect() protoreflect.Message {
	mi := &file_aic_data_aic_api_models_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TuitionCentre.ProtoReflect.Descriptor instead.
func (*TuitionCentre) Descriptor() ([]byte, []int) {
	return file_aic_data_aic_api_models_proto_rawDescGZIP(), []int{10}
}

func (x *TuitionCentre) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *TuitionCentre) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *TuitionCentre) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TuitionCentre) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TuitionCentre) GetContactNumber() string {
	if x != nil {
		return x.ContactNumber
	}
	return ""
}

func (x *TuitionCentre) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *TuitionCentre) GetTier() []Tier {
	if x != nil {
		return x.Tier
	}
	return nil
}

type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize   int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	TotalPages int32 `protobuf:"varint,3,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aic_data_aic_api_models_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_aic_data_aic_api_models_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_aic_data_aic_api_models_proto_rawDescGZIP(), []int{11}
}

func (x *Pagination) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Pagination) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *Pagination) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

var File_aic_data_aic_api_models_proto protoreflect.FileDescriptor

var file_aic_data_aic_api_models_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x61, 0x69, 0x63, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x61, 0x69, 0x63, 0x5f, 0x61,
	0x70, 0x69, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x61, 0x69, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb4, 0x02, 0x0a, 0x07, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x61, 0x69, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x69, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x63, 0x68,
	0x6f, 0x6f, 0x6c, 0x52, 0x06, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x12, 0x35, 0x0a, 0x0b, 0x61,
	0x66, 0x66, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x61, 0x69, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x66, 0x66, 0x6c, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x66, 0x66, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18,
	0xc8, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x22, 0xb6, 0x01, 0x0a, 0x0a, 0x41, 0x66, 0x66, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x40, 0x0a, 0x0f, 0x61, 0x66, 0x66, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x69, 0x63, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x41, 0x66, 0x66, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0e, 0x61, 0x66, 0x66, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x69, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x63, 0x68, 0x6f,
	0x6f, 0x6c, 0x52, 0x06, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x12, 0x3d, 0x0a, 0x0e, 0x74, 0x75,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x75, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x52, 0x0d, 0x74, 0x75, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x22, 0xfc, 0x04, 0x0a, 0x08, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x69, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x61, 0x69, 0x63, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x54, 0x69, 0x65, 0x72, 0x52, 0x04, 0x74, 0x69, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x61,
	0x69, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x69, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x63, 0x68,
	0x6f, 0x6f, 0x6c, 0x52, 0x06, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x70, 0x65, 0x72, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x70, 0x65, 0x72, 0x59, 0x65, 0x61, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x70, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x70, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x0b, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x61, 0x69, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x41, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x46, 0x0a, 0x11, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x61, 0x69, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x10, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x22, 0xaf, 0x03, 0x0a, 0x10, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x65, 0x61,
	0x72, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x11, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74,
	0x61, 0x6b, 0x65, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x37, 0x0a, 0x18,
	0x73, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15,
	0x73, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17, 0x6d, 0x65, 0x61, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f,
	0x6c, 0x69, 0x6b, 0x65, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x22, 0xc8, 0x01, 0x0a, 0x0e, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x27, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x61, 0x69, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x12, 0x5c, 0x0a, 0x19, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x63,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x17, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x42, 0x72, 0x65, 0x61,
	0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0x19, 0x0a, 0x17, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e,
	0x22, 0xa1, 0x01, 0x0a, 0x07, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x69,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x06,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x61,
	0x69, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x61,
	0x6b, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x54,
	0x61, 0x6b, 0x65, 0x6e, 0x22, 0xe1, 0x01, 0x0a, 0x08, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61,
	0x69, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0b,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x69,
	0x6b, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x22, 0x99, 0x02, 0x0a, 0x0a, 0x44, 0x69, 0x73,
	0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x0c,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x69, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x64, 0x69,
	0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x69, 0x6b, 0x65,
	0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x6c, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x04, 0x74, 0x69, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x61, 0x69, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x69, 0x65, 0x72, 0x52, 0x04, 0x74, 0x69,
	0x65, 0x72, 0x22, 0xca, 0x01, 0x0a, 0x0d, 0x54, 0x75, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65,
	0x6e, 0x74, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x21, 0x0a, 0x04,
	0x74, 0x69, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x61, 0x69, 0x63,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x69, 0x65, 0x72, 0x52, 0x04, 0x74, 0x69, 0x65, 0x72, 0x22,
	0x5e, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x2a,
	0x4c, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13,
	0x0a, 0x0f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x53, 0x45, 0x52, 0x10, 0x64, 0x12, 0x12, 0x0a,
	0x0d, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0xc8,
	0x01, 0x12, 0x0a, 0x0a, 0x05, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0xac, 0x02, 0x2a, 0x49, 0x0a,
	0x0e, 0x41, 0x66, 0x66, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x12, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x41, 0x46, 0x46, 0x4c, 0x49,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x43, 0x48, 0x4f, 0x4f,
	0x4c, 0x10, 0x64, 0x12, 0x13, 0x0a, 0x0e, 0x54, 0x55, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x45, 0x4e, 0x54, 0x52, 0x45, 0x10, 0xc8, 0x01, 0x2a, 0x24, 0x0a, 0x06, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x05, 0x0a, 0x01, 0x41, 0x10, 0x00, 0x12, 0x05, 0x0a, 0x01, 0x42, 0x10, 0x0a,
	0x12, 0x05, 0x0a, 0x01, 0x43, 0x10, 0x14, 0x12, 0x05, 0x0a, 0x01, 0x44, 0x10, 0x1e, 0x2a, 0x3e,
	0x0a, 0x04, 0x54, 0x69, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x5f, 0x54, 0x49, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x4d,
	0x41, 0x52, 0x59, 0x10, 0x64, 0x12, 0x0e, 0x0a, 0x09, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41,
	0x52, 0x59, 0x10, 0xc8, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x4a, 0x43, 0x10, 0xac, 0x02, 0x2a, 0xd0,
	0x01, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x45,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x4d, 0x41, 0x54, 0x48, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x43, 0x49,
	0x45, 0x4e, 0x43, 0x45, 0x10, 0x14, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x47, 0x4c, 0x49, 0x53,
	0x48, 0x10, 0x1e, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x54, 0x4f,
	0x4e, 0x47, 0x55, 0x45, 0x10, 0x28, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x41, 0x52, 0x59, 0x5f, 0x4d, 0x41, 0x54, 0x48, 0x10, 0xe8, 0x07, 0x12, 0x14, 0x0a, 0x0f,
	0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x4d, 0x41, 0x54, 0x48, 0x10,
	0xf2, 0x07, 0x12, 0x11, 0x0a, 0x0c, 0x48, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x43, 0x49, 0x45, 0x4e,
	0x43, 0x45, 0x10, 0xcc, 0x08, 0x12, 0x0e, 0x0a, 0x09, 0x48, 0x41, 0x52, 0x44, 0x5f, 0x4d, 0x41,
	0x54, 0x48, 0x10, 0xb0, 0x09, 0x12, 0x11, 0x0a, 0x0c, 0x48, 0x41, 0x52, 0x44, 0x5f, 0x45, 0x4e,
	0x47, 0x4c, 0x49, 0x53, 0x48, 0x10, 0x94, 0x0a, 0x12, 0x17, 0x0a, 0x12, 0x48, 0x41, 0x52, 0x44,
	0x5f, 0x4d, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x4e, 0x47, 0x55, 0x45, 0x10, 0xf8,
	0x0a, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x61, 0x69, 0x63, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x69, 0x64, 0x6c, 0x5f, 0x67, 0x65, 0x6e,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x61, 0x69, 0x63, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aic_data_aic_api_models_proto_rawDescOnce sync.Once
	file_aic_data_aic_api_models_proto_rawDescData = file_aic_data_aic_api_models_proto_rawDesc
)

func file_aic_data_aic_api_models_proto_rawDescGZIP() []byte {
	file_aic_data_aic_api_models_proto_rawDescOnce.Do(func() {
		file_aic_data_aic_api_models_proto_rawDescData = protoimpl.X.CompressGZIP(file_aic_data_aic_api_models_proto_rawDescData)
	})
	return file_aic_data_aic_api_models_proto_rawDescData
}

var file_aic_data_aic_api_models_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_aic_data_aic_api_models_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_aic_data_aic_api_models_proto_goTypes = []interface{}{
	(AccountType)(0),                // 0: aic_api.AccountType
	(AffliationType)(0),             // 1: aic_api.AffliationType
	(Option)(0),                     // 2: aic_api.Option
	(Tier)(0),                       // 3: aic_api.Tier
	(Subject)(0),                    // 4: aic_api.Subject
	(*Profile)(nil),                 // 5: aic_api.Profile
	(*Affliation)(nil),              // 6: aic_api.Affliation
	(*Question)(nil),                // 7: aic_api.Question
	(*QuestionAnalysis)(nil),        // 8: aic_api.QuestionAnalysis
	(*AnswerAnalysis)(nil),          // 9: aic_api.AnswerAnalysis
	(*AnswerAnalysisBreakdown)(nil), // 10: aic_api.AnswerAnalysisBreakdown
	(*Attempt)(nil),                 // 11: aic_api.Attempt
	(*Solution)(nil),                // 12: aic_api.Solution
	(*Discussion)(nil),              // 13: aic_api.Discussion
	(*School)(nil),                  // 14: aic_api.School
	(*TuitionCentre)(nil),           // 15: aic_api.TuitionCentre
	(*Pagination)(nil),              // 16: aic_api.Pagination
}
var file_aic_data_aic_api_models_proto_depIdxs = []int32{
	0,  // 0: aic_api.Profile.account_type:type_name -> aic_api.AccountType
	14, // 1: aic_api.Profile.school:type_name -> aic_api.School
	6,  // 2: aic_api.Profile.affliations:type_name -> aic_api.Affliation
	1,  // 3: aic_api.Affliation.affliation_type:type_name -> aic_api.AffliationType
	14, // 4: aic_api.Affliation.school:type_name -> aic_api.School
	15, // 5: aic_api.Affliation.tuition_centre:type_name -> aic_api.TuitionCentre
	3,  // 6: aic_api.Question.tier:type_name -> aic_api.Tier
	4,  // 7: aic_api.Question.subject:type_name -> aic_api.Subject
	14, // 8: aic_api.Question.school:type_name -> aic_api.School
	5,  // 9: aic_api.Question.uploaded_by:type_name -> aic_api.Profile
	8,  // 10: aic_api.Question.question_analysis:type_name -> aic_api.QuestionAnalysis
	2,  // 11: aic_api.AnswerAnalysis.option:type_name -> aic_api.Option
	10, // 12: aic_api.AnswerAnalysis.answer_analysis_breakdown:type_name -> aic_api.AnswerAnalysisBreakdown
	2,  // 13: aic_api.Attempt.answer:type_name -> aic_api.Option
	5,  // 14: aic_api.Solution.submitted_by:type_name -> aic_api.Profile
	5,  // 15: aic_api.Discussion.submitted_by:type_name -> aic_api.Profile
	3,  // 16: aic_api.School.tier:type_name -> aic_api.Tier
	3,  // 17: aic_api.TuitionCentre.tier:type_name -> aic_api.Tier
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_aic_data_aic_api_models_proto_init() }
func file_aic_data_aic_api_models_proto_init() {
	if File_aic_data_aic_api_models_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_aic_data_aic_api_models_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aic_data_aic_api_models_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Affliation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aic_data_aic_api_models_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Question); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aic_data_aic_api_models_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionAnalysis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aic_data_aic_api_models_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnswerAnalysis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aic_data_aic_api_models_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnswerAnalysisBreakdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aic_data_aic_api_models_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attempt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aic_data_aic_api_models_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Solution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aic_data_aic_api_models_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Discussion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aic_data_aic_api_models_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*School); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aic_data_aic_api_models_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TuitionCentre); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aic_data_aic_api_models_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aic_data_aic_api_models_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_aic_data_aic_api_models_proto_goTypes,
		DependencyIndexes: file_aic_data_aic_api_models_proto_depIdxs,
		EnumInfos:         file_aic_data_aic_api_models_proto_enumTypes,
		MessageInfos:      file_aic_data_aic_api_models_proto_msgTypes,
	}.Build()
	File_aic_data_aic_api_models_proto = out.File
	file_aic_data_aic_api_models_proto_rawDesc = nil
	file_aic_data_aic_api_models_proto_goTypes = nil
	file_aic_data_aic_api_models_proto_depIdxs = nil
}
